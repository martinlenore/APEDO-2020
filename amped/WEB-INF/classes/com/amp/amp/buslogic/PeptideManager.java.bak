/*******************************************************************************
 * File: PeptideManager.java
 *
 * Copyright (c) 2020 Amped.  All rights Reserved.
 ******************************************************************************/
package com.amp.amp.buslogic;

import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.criterion.Restrictions;

import com.amp.amp.amp.beans.*;
import com.amp.amp.util.HibernateUtil;
import java.util.*;
import javax.mail.*;
import javax.mail.internet.*;
import javax.activation.*;



public class PeptideManager {
  
 
  private PeptideManager() {
  }

  @SuppressWarnings("unchecked")
  

   public static List<PeptideBean> peptideList(){
    Session session = HibernateUtil.getSessionFactory().getCurrentSession();
	session.beginTransaction();
	Query query ;
	String strQuery;
	System.out.println("BEFORE EXECUTING PEPTIDE SQL QUERY");
    strQuery = "select pp from PeptideBean pp";
	System.out.println("AFTER EXECUTING PEPTIDE SQL QUERY");
      query = session.createQuery(strQuery);
	  List<PeptideBean> result = (List<PeptideBean>) query.list();
    return result;
  }

    /*public static void updateTransliteration(TransliterationUsersBean transUser) {
    if (transUser == null) {
      return;
    } else {
      Session session = HibernateUtil.getSessionFactory().getCurrentSession();
      transUser.setLoginCount(transUser.getLoginCount() + 1);
      transUser.setLastLogin(new Date());
      session.update(transUser);
      return;
    }
  }

  public static void addNewClient(HttpServletRequest request) throws Exception {
    Session session = HibernateUtil.getSessionFactory().getCurrentSession();
    session.beginTransaction();
    ClientBean client = null;
    String nAme = request.getParameter(NAME);
    String phoneNo = request.getParameter(MOBILE_NO);
    String email = request.getParameter(EMAIL_ADDRESS);
	System.out.println("KKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK"+email);
    String aRea = request.getParameter(AREA);
	client = new ClientBean();
    client.setName(nAme);
    client.setEmail(email);
    client.setPhoneno(phoneNo);
	client.setArea(aRea);
	client.setAddress1(null);
	client.setStatus("n");
    client.setCreated_at(new Date());
	System.out.println("KKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK");
    session.save(client);  
	System.out.println("Client Details are added Sucessfully...........");    
  }

  public static List<ClientBean> checkEmailId(String email){
    Session session = HibernateUtil.getSessionFactory().getCurrentSession();
	ClientBean emailCheck = null;
	if(email != ""){
      emailCheck = (ClientBean) session.createCriteria(ClientBean.class).add(Restrictions.eq("email", email)).uniqueResult();
	}
	System.out.println("TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT"+emailCheck);
    return emailCheck;
  }

  public static void SendMail(){
	  System.out.println("KKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK");
     String to = "Shwetha.suresh@uk.bp.com";

      // Sender's email ID needs to be mentioned
      String username = "Venkata.Katta@uk.bp.com";
	  String password = "Krishanu\100318";

      // Assuming you are sending email from localhost
	  String host = "eumail.bp.com";
      String smtp = "BP1XEUEX042-C.bp1.ad.bp.com";

      // Get system properties
      Properties properties = System.getProperties();
   
      // Setup mail server
      //properties.setProperty("mail.smtp.host", host);
	  properties.put("mail.smtp.starttls.enable", "true"); 
      properties.put(smtp, host);
	 //properties.put("mail.smtp.user", from); 
	 //properties.put("mail.smtp.password", password); 
	 properties.put("mail.smtp.socketFactory.port", "465");       
	 properties.put("mail.smtp.socketFactory.class","javax.net.ssl.SSLSocketFactory");  
	 //properties.put("mail.smtp.socketFactory.fallback", "false");        
	 properties.setProperty("mail.smtp.quitwait", "false");
	  //properties.put("mail.smtp.port", "587"); 
	  properties.put("mail.smtp.auth", "true");
	  properties.put("mail.debug", "true"); 
	  // 587 is the port number of yahoo mail props.put("mail.smtp.auth", "true"); 


      // Get the default Session object.
      javax.mail.Session session = javax.mail.Session.getDefaultInstance(properties);
	  session = session.getInstance(properties, new GMailAuthenticator(username, password));

      try{
         // Create a default MimeMessage object.
         MimeMessage message = new MimeMessage(session);

         // Set From: header field of the header.
         message.setFrom(new InternetAddress(username));

         // Set To: header field of the header.
         message.addRecipient(Message.RecipientType.TO,
                                  new InternetAddress(to));

         // Set Subject: header field
         message.setSubject("This is the Subject Line!");

         // Now set the actual message
         message.setText("This is actual message");
        Transport transport = session.getTransport("smtps"); 
		 transport.connect(host, 25, username, password); 
         //Send message
         transport.send(message);
         System.out.println("Sent message successfully....");
		 
      }catch (MessagingException mex) {
         mex.printStackTrace();
      }
  }*/
}